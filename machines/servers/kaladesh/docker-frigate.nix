{
  pkgs,
  lib,
  ...
}: {
  sops.secrets = {
    "frigate/plus-key" = {};
    "frigate/rtsp-password" = {};
  };

  virtualisation.oci-containers.containers."frigate" = {
    image = "ghcr.io/blakeblackshear/frigate:stable";
    environmentFile = [
      sops.secrets."frigate/plus-key".path
      sops.secrets."frigate/rtsp-password".path
    ];
    volumes = [
      "/dev/bus/usb:/dev/bus/usb:rw"
      "/etc/localtime:/etc/localtime:ro"
      "/var/lib/frigate/config:/config:rw"
      "/mnt/frigate:/media/frigate:rw"
    ];
    ports = [
      "5000:5000/tcp"
      "1935:1935/tcp"
      "8555:8555/tcp"
      "8555:8555/udp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/bus/usb:/dev/bus/usb:rwm"
      "--network-alias=frigate"
      "--network=frigate_default"
      "--privileged"
      "--shm-size=268435456"
    ];
  };
  systemd.services."podman-frigate" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-frigate_default.service"
    ];
    requires = [
      "podman-network-frigate_default.service"
    ];
    partOf = [
      "podman-compose-frigate-root.target"
    ];
    wantedBy = [
      "podman-compose-frigate-root.target"
    ];
  };

  systemd.services."podman-network-frigate_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f frigate_default";
    };
    script = ''
      podman network inspect frigate_default || podman network create frigate_default
    '';
    partOf = ["podman-compose-frigate-root.target"];
    wantedBy = ["podman-compose-frigate-root.target"];
  };

  systemd.targets."podman-compose-frigate-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}

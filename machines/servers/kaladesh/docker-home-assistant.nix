{
  pkgs,
  lib,
  ...
}: {
  virtualisation.oci-containers.containers."homeassistant" = {
    image = "ghcr.io/home-assistant/home-assistant:stable";
    volumes = [
      "/var/lib/home-assistant/config:/config:rw"
      "/var/lib/home-assistant/media:/media:rw"
      "/etc/localtime:/etc/localtime:ro"
      "/run/dbus:/run/dbus:ro"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=host"
      "--privileged"
    ];
  };

  systemd.services."home-assistant" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-home-assistant_default.service"
    ];
    requires = [
      "podman-network-home-assistant_default.service"
    ];
    partOf = [
      "podman-compose-home-assistant-root.target"
    ];
    wantedBy = [
      "podman-compose-home-assistant-root.target"
    ];
  };

  systemd.services."podman-network-home-assistant_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f home-assistant_default";
    };
    script = ''
      podman network inspect home-assistant_default || podman network create home-assistant_default
    '';
    partOf = ["podman-compose-home-assistant-root.target"];
    wantedBy = ["podman-compose-home-assistant-root.target"];
  };

  systemd.targets."podman-compose-home-assistant-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
